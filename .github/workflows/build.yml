name: build and deploy

on:
  workflow_dispatch:
    inputs:
      data:
        description: "data"
        required: true
        default: "null"
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: bip
          POSTGRES_PASSWORD: Production_123
          POSTGRES_DB: db
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: run bun install workspace
        run: bun install

      - name: Handle env
        run: |
          echo "WIBU_NAME=${{ fromJson(inputs.data).name }}" >> $GITHUB_ENV
          echo "WIBU_NAMESPACE=${{ fromJson(inputs.data).namespace }}" >> $GITHUB_ENV
          echo "WIBU_REPO=${{ fromJson(inputs.data).repo }}" >> $GITHUB_ENV
          echo "WIBU_BRANCH=${{ fromJson(inputs.data).branch }}" >> $GITHUB_ENV
          echo "WIBU_DATE=${{ fromJson(inputs.data).date }}" >> $GITHUB_ENV
          echo "WIBU_APP_VERSION=$(date +%Y-%m-%d_%H-%M-%S)" >> $GITHUB_ENV
          echo "WIBU_COUNT=${{ fromJson(inputs.data).count }}" >> $GITHUB_ENV
          echo "WIBU_SOURCE_DIR=${{ github.workspace }}/${{fromJson(inputs.data).appVersion}}" >> $GITHUB_ENV
          echo "WIBU_TARGET_PROJECT_DIR=/var/www/projects/${{ fromJson(inputs.data).name }}/${{ fromJson(inputs.data).namespace }}" >> $GITHUB_ENV
          echo "WIBU_TARGET_RELEASES_DIR=/var/www/projects/${{ fromJson(inputs.data).name }}/${{ fromJson(inputs.data).namespace }}/releases" >> $GITHUB_ENV
          echo "WIBU_TARGET_CURRENT_DIR=/var/www/projects/${{ fromJson(inputs.data).name }}/${{ fromJson(inputs.data).namespace }}/current" >> $GITHUB_ENV
          echo "WIBU_TARGET_WORKER_DIR=/var/www/projects/${{ fromJson(inputs.data).name }}/${{ fromJson(inputs.data).namespace }}/releases/${{fromJson(inputs.data).appVersion}}" >> $GITHUB_ENV

      - name: clone project
        run: git clone --branch ${{ env.WIBU_BRANCH }} https://x-access-token:${{ secrets.WIBU_GIT_TOKEN }}@github.com/bipproduction/${{ env.WIBU_REPO }}.git ${{ env.WIBU_APP_VERSION }}

      - name: handle .env
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: cat package.json

      - name: handle .env
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: echo '${{ fromJson(inputs.data).env }}' > .env

      - name: bun install on source
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: bun install

      - name: db push
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: bunx prisma db push

      - name: db seed
        continue-on-error: true
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: bunx prisma db seed

      - name: build
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: bun run build

      - name: take screenshot
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: |
          bun run start --port 3000
          sleep 5
          curl -s http://localhost:3000 > screenshot.png

      - name: remove node_modules
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: rm -r node_modules

      - name: handle create dir releases
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            mkdir -p ${{env.WIBU_TARGET_RELEASES_DIR}}

      - name: Deploy to VPS (New Version)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          source: "${{ env.WIBU_APP_VERSION}}"
          target: "${{ env.WIBU_TARGET_RELEASES_DIR }}"

      - name: handle config on server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            # deploy env
            echo "${{ fromJson(inputs.data).env }}" > ${{ env.WIBU_TARGET_WORKER_DIR }}/.env

            # install and db push
            cd ${{env.WIBU_TARGET_WORKER_DIR}} && bun install && bunx prisma db push

            # seed
            cd ${{env.WIBU_TARGET_WORKER_DIR}} && bunx prisma db seed || true

            # generate config
            cd ${{ env.WIBU_TARGET_PROJECT_DIR }}
            ECOSYSTEM_FILE="ecosystem.config.json"
            if [[ ! -f "$ECOSYSTEM_FILE" ]]; then
              CONFIF=$(bun /var/www/lib/generate-config.ts \
                --name "${{ env.WIBU_NAME }}" \
                --namespace "${{ env.WIBU_NAMESPACE }}" \
                --count "${{ env.WIBU_COUNT }}")
            if [[ -z "$CONFIF" ]]; then
              echo "Error: Failed to generate config"
              exit 1
            fi
            echo "$CONFIF" > "$ECOSYSTEM_FILE"
            fi

      - name: handle current on server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            # Hapus symlink current jika ada (abaikan error jika tidak ada)
            rm -rf ${{ env.WIBU_TARGET_CURRENT_DIR }} 2>&1 || true

            # Buat symlink baru ke direktori worker terbaru
            ln -sf ${{ env.WIBU_TARGET_WORKER_DIR }} ${{ env.WIBU_TARGET_CURRENT_DIR }}

            # Reload PM2 jika sudah berjalan, atau mulai PM2 jika belum berjalan
            pm2 reload ${{ env.WIBU_TARGET_PROJECT_DIR }}/ecosystem.config.json || \
            pm2 start ${{ env.WIBU_TARGET_PROJECT_DIR }}/ecosystem.config.json

            # Simpan konfigurasi PM2 agar persisten setelah reboot
            pm2 save

            # Update history
            bun /var/www/lib/history.ts --name "${{ env.WIBU_NAME }}" --namespace "${{ env.WIBU_NAMESPACE }}"

      - name: finish
        if: always()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"text": "Finish Deploy"}' \
          ${{ secrets.FBS_DB_URL }}/logs/build/${{ env.WIBU_NAMESPACE }}/log.json
