name: build and deploy

on:
  workflow_dispatch:
    inputs:
      data:
        description: "data"
        required: true
        default: "null"

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: bip
          POSTGRES_PASSWORD: Production_123
          POSTGRES_DB: db
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Run bun install workspace
        run: bun install

      - name: Handle env
        run: |
          APP_VERSION=$(date +%Y-%m-%d_%H-%M-%S)
          echo "WIBU_NAME=${{ fromJson(inputs.data).name }}" >> $GITHUB_ENV
          echo "WIBU_NAMESPACE=${{ fromJson(inputs.data).namespace }}" >> $GITHUB_ENV
          echo "WIBU_REPO=${{ fromJson(inputs.data).repo }}" >> $GITHUB_ENV
          echo "WIBU_BRANCH=${{ fromJson(inputs.data).branch }}" >> $GITHUB_ENV
          echo "WIBU_DATE=${{ fromJson(inputs.data).date }}" >> $GITHUB_ENV
          echo "WIBU_APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
          echo "WIBU_COUNT=${{ fromJson(inputs.data).count }}" >> $GITHUB_ENV
          echo "WIBU_DB_PUSH=${{ fromJson(inputs.data).options.dbPush }}" >> $GITHUB_ENV
          echo "WIBU_DB_SEED=${{ fromJson(inputs.data).options.dbSeed }}" >> $GITHUB_ENV
          echo "WIBU_BUILD=${{ fromJson(inputs.data).options.build }}" >> $GITHUB_ENV
          echo "WIBU_SOURCE_DIR=${{ github.workspace }}/${APP_VERSION}" >> $GITHUB_ENV
          echo "WIBU_TARGET_PROJECT_DIR=/var/www/projects/${{ fromJson(inputs.data).name }}/${{ fromJson(inputs.data).namespace }}" >> $GITHUB_ENV
          echo "WIBU_TARGET_RELEASES_DIR=/var/www/projects/${{ fromJson(inputs.data).name }}/${{ fromJson(inputs.data).namespace }}/releases" >> $GITHUB_ENV
          echo "WIBU_TARGET_CURRENT_DIR=/var/www/projects/${{ fromJson(inputs.data).name }}/${{ fromJson(inputs.data).namespace }}/current" >> $GITHUB_ENV
          echo "WIBU_TARGET_WORKER_DIR=/var/www/projects/${{ fromJson(inputs.data).name }}/${{ fromJson(inputs.data).namespace }}/releases/${{ env.WIBU_APP_VERSION }}" >> $GITHUB_ENV

      - name: Clone project
        run: |
          git clone --branch ${{ env.WIBU_BRANCH }} https://x-access-token:${{ secrets.WIBU_GIT_TOKEN }}@github.com/bipproduction/${{ env.WIBU_REPO }}.git ${{ env.WIBU_SOURCE_DIR }}

      - name: Handle .env
        working-directory: ${{ env.WIBU_SOURCE_DIR }}
        run: |
          echo '${{ fromJson(inputs.data).env }}' > .env
          cat .env # Debugging: Tampilkan isi .env

      - name: Bun install on source
        working-directory: ${{ env.WIBU_SOURCE_DIR }}
        run: bun install

      - name: DB push
        if: ${{ env.WIBU_DB_PUSH == 'true' }}
        working-directory: ${{ env.WIBU_SOURCE_DIR }}
        run: bunx prisma db push

      - name: DB seed
        if: ${{ env.WIBU_DB_SEED == 'true' }}
        working-directory: ${{ env.WIBU_SOURCE_DIR }}
        run: bunx prisma db seed

      - name: Build
        if: ${{ env.WIBU_BUILD == 'true' }}
        working-directory: ${{ env.WIBU_SOURCE_DIR }}
        run: bun run build

      - name: Remove node_modules
        working-directory: ${{ env.WIBU_SOURCE_DIR }}
        run: rm -rf node_modules

      - name: Create releases directory on VPS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            mkdir -p ${{ env.WIBU_TARGET_RELEASES_DIR }}

      - name: Deploy to VPS (New Version)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          source: "${{ env.WIBU_SOURCE_DIR }}/*"
          target: "${{ env.WIBU_TARGET_WORKER_DIR }}"
          strip_components: 1 # Hanya ambil isi folder

      - name: Configure on server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            # Deploy .env
            echo "${{ fromJson(inputs.data).env }}" > ${{ env.WIBU_TARGET_WORKER_DIR }}/.env

            # Install dependencies
            cd ${{ env.WIBU_TARGET_WORKER_DIR }} && bun install

            # DB push if enabled
            if [ "${{ env.WIBU_DB_PUSH }}" = "true" ]; then
              cd ${{ env.WIBU_TARGET_WORKER_DIR }} && bunx prisma db push
            fi

            # DB seed if enabled
            if [ "${{ env.WIBU_DB_SEED }}" = "true" ]; then
              cd ${{ env.WIBU_TARGET_WORKER_DIR }} && bunx prisma db seed
            fi

            # Generate ecosystem config if not exists
            cd ${{ env.WIBU_TARGET_PROJECT_DIR }}
            ECOSYSTEM_FILE="ecosystem.config.json"
            if [ ! -f "$ECOSYSTEM_FILE" ]; then
              CONFIG=$(bun /var/www/lib/generate-config.ts \
                --name "${{ env.WIBU_NAME }}" \
                --namespace "${{ env.WIBU_NAMESPACE }}" \
                --count "${{ env.WIBU_COUNT }}")
              if [ -z "$CONFIG" ]; then
                echo "Error: Failed to generate config"
                exit 1
              fi
              echo "$CONFIG" > "$ECOSYSTEM_FILE"
            fi

      - name: Clean current directory
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            rm -rf ${{ env.WIBU_TARGET_CURRENT_DIR }}

      - name: Handle current on server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            # Create symlink to latest release
            ln -sf ${{ env.WIBU_TARGET_WORKER_DIR }} ${{ env.WIBU_TARGET_CURRENT_DIR }}

            # Verify symlink
            if [ ! -L ${{ env.WIBU_TARGET_CURRENT_DIR }} ]; then
              echo "Error: Failed to create symlink for current"
              exit 1
            fi

            # Reload or start PM2
            pm2 reload ${{ env.WIBU_TARGET_PROJECT_DIR }}/ecosystem.config.json || \
            pm2 start ${{ env.WIBU_TARGET_PROJECT_DIR }}/ecosystem.config.json

            # Save PM2 configuration
            pm2 save

            # Update history
            bun /var/www/lib/history.ts --name "${{ env.WIBU_NAME }}" --namespace "${{ env.WIBU_NAMESPACE }}"

      - name: Debug directory structure
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            echo "Releases directory:"
            ls -la ${{ env.WIBU_TARGET_RELEASES_DIR }}
            echo "Current directory:"
            ls -la ${{ env.WIBU_TARGET_CURRENT_DIR }}
            echo "Symlink target:"
            readlink ${{ env.WIBU_TARGET_CURRENT_DIR }}

      - name: Finish
        if: always()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"text": "Finish Deploy"}' \
          ${{ secrets.FBS_DB_URL }}/logs/build/${{ env.WIBU_NAMESPACE }}/log.json