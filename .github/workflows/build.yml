name: build and deploy v2

on:
  workflow_dispatch:
    inputs:
      data:
        description: "data"
        required: true
        default: "null"
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: bip
          POSTGRES_PASSWORD: Production_123
          POSTGRES_DB: db
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: run bun install workspace
        run: bun install

      - name: Handle parse env
        run: |
          # Handle ENV
          APP_VERSION=$(date +%Y-%m-%d_%H-%M-%S)
          echo "WIBU_NAME=${{ fromJson(inputs.data).name }}" >> $GITHUB_ENV
          echo "WIBU_NAMESPACE=${{ fromJson(inputs.data).namespace }}" >> $GITHUB_ENV
          echo "WIBU_REPO=${{ fromJson(inputs.data).repo }}" >> $GITHUB_ENV
          echo "WIBU_BRANCH=${{ fromJson(inputs.data).branch }}" >> $GITHUB_ENV
          echo "WIBU_DATE=${{ fromJson(inputs.data).date }}" >> $GITHUB_ENV
          echo "WIBU_APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
          echo "WIBU_COUNT=${{ fromJson(inputs.data).options.count }}" >> $GITHUB_ENV
          echo "WIBU_PORTS=${{ fromJson(inputs.data).options.ports }}" >> $GITHUB_ENV
          echo "WIBU_DB_PUSH=${{ fromJson(inputs.data).options.dbPush }}" >> $GITHUB_ENV
          echo "WIBU_DB_SEED=${{ fromJson(inputs.data).options.dbSeed }}" >> $GITHUB_ENV
          echo "WIBU_BUILD=${{ fromJson(inputs.data).options.build }}" >> $GITHUB_ENV
          echo "WIBU_NEW_CONFIG=${{ fromJson(inputs.data).options.newConfig }}" >> $GITHUB_ENV
          echo "WIBU_SOURCE_DIR=${{ github.workspace }}/${APP_VERSION}" >> $GITHUB_ENV
          echo "WIBU_TARGET_PROJECT_DIR=/var/www/projects/${{ fromJson(inputs.data).name }}/${{ fromJson(inputs.data).namespace }}" >> $GITHUB_ENV
          echo "WIBU_TARGET_RELEASES_DIR=/var/www/projects/${{ fromJson(inputs.data).name }}/${{ fromJson(inputs.data).namespace }}/releases" >> $GITHUB_ENV
          echo "WIBU_TARGET_CURRENT_DIR=/var/www/projects/${{ fromJson(inputs.data).name }}/${{ fromJson(inputs.data).namespace }}/current" >> $GITHUB_ENV
          echo "WIBU_TARGET_WORKER_DIR=/var/www/projects/${{ fromJson(inputs.data).name }}/${{ fromJson(inputs.data).namespace }}/releases/${APP_VERSION}" >> $GITHUB_ENV

      - name: clone project
        run: git clone --branch ${{ env.WIBU_BRANCH }} https://x-access-token:${{ secrets.WIBU_GIT_TOKEN }}@github.com/bipproduction/${{ env.WIBU_REPO }}.git ${{ env.WIBU_APP_VERSION }}

      - name: create env
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: |
          echo '${{ fromJson(inputs.data).env }}' > .env

      - name: bun install on source
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: bun install

      - name: db push
        if: ${{ fromJson(inputs.data).options.dbPush == true }}
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: bunx prisma db push

      - name: db seed
        if: ${{ fromJson(inputs.data).options.dbSeed == true }}
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: bunx prisma db seed

      - name: build
        if: ${{ fromJson(inputs.data).options.build == true }}
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: bun run build

      - name: remove node_modules
        working-directory: ${{ env.WIBU_APP_VERSION }}
        run: rm -r node_modules

      - name: handle create dir releases
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            mkdir -p ${{env.WIBU_TARGET_RELEASES_DIR}}

      - name: Deploy to VPS (New Version)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          source: "${{ env.WIBU_APP_VERSION}}"
          target: "${{ env.WIBU_TARGET_RELEASES_DIR }}"

      - name: handle install on vps
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            cd ${{ env.WIBU_TARGET_WORKER_DIR }} && bun install

      - name: handle env on vps
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            echo "${{ fromJson(inputs.data).env }}" > ${{ env.WIBU_TARGET_WORKER_DIR }}/.env

      - name: handle db push on vps
        if: ${{ fromJson(inputs.data).options.dbPush == true }}
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            cd ${{ env.WIBU_TARGET_WORKER_DIR }} && bunx prisma db push

      - name: handle db seed on vps
        if: ${{ fromJson(inputs.data).options.dbSeed == true }}
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            bunx prisma db seed

      - name: handle generate config
        if: ${{ fromJson(inputs.data).options.newConfig == true }}
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            cd ${{ env.WIBU_TARGET_PROJECT_DIR }} && \
            DATA=$(curl -s \
            https://raw.githubusercontent.com/bipproduction/wibu-server/refs/heads/main/lib/generate-config.ts?v=1 \
            | bun run - \
              --name "${{ env.WIBU_NAME }}" \
              --namespace "${{ env.WIBU_NAMESPACE }}" \
              --count "${{ env.WIBU_COUNT }}" \
              --ports "${{ env.WIBU_PORTS }}" \
            )
            echo "$DATA" > ecosystem.config.json

      - name: Clean current directory
        uses: appleboy/ssh-action@v1
        continue-on-error: true
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            # Hapus direktori current jika ada
            if [ -d "${{ env.WIBU_TARGET_CURRENT_DIR }}" ]; then
              rm -rf ${{ env.WIBU_TARGET_CURRENT_DIR }}
              echo "Current directory cleaned up"
            fi

      - name: handle current on server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            git config --global --add safe.directory ${{ env.WIBU_TARGET_WORKER_DIR }}

            # Buat symlink baru ke direktori worker terbaru
            ln -sf ${{ env.WIBU_TARGET_WORKER_DIR }} ${{ env.WIBU_TARGET_CURRENT_DIR }}

            # Reload PM2 jika sudah berjalan, atau mulai PM2 jika belum berjalan
            pm2 reload ${{ env.WIBU_TARGET_PROJECT_DIR }}/ecosystem.config.json || \
            pm2 start ${{ env.WIBU_TARGET_PROJECT_DIR }}/ecosystem.config.json

            # Simpan konfigurasi PM2 agar persisten setelah reboot
            pm2 save

      - name: update history
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            curl -s \
            https://raw.githubusercontent.com/bipproduction/wibu-server/refs/heads/main/lib/history.ts?v=1 \
            | bun run - \
              --name "${{ env.WIBU_NAME }}" \
              --namespace "${{ env.WIBU_NAMESPACE }}" 

      - name: finish
        if: always()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"text": "Finish Deploy"}' \
          ${{ secrets.FBS_DB_URL }}/logs/build/${{ env.WIBU_NAMESPACE }}/log.json
