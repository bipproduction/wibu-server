// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Test {
  id Int @id @default(autoincrement())
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// ==========================================================

model Repos {
  id          String     @id @default(cuid())
  name        String
  full_name   String     @unique
  html_url    String
  description String
  stars       Int
  language    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Projects    Projects[]

  @@map("repos")
}

model Projects {
  id                 String               @id @default(cuid())
  name               String               @unique
  full_name          String
  description        String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ProjectEnvironment ProjectEnvironment[]
  Repos              Repos?               @relation(fields: [reposId], references: [id])
  reposId            String?
  push               Boolean              @default(false)
  seed               Boolean              @default(false)
  build              Boolean              @default(false)
  Config             Config[]
  Env                Env[]

  @@map("projects")
}

model ProjectEnvironment {
  projectId String
  name      String
  branch    String
  isActive  Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  project   Projects? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Env       Env[]
  Config    Config[]

  @@id([projectId, name])
  @@map("project_environment")
}

model Config {
  json                        Json?               @default("{}") @db.Json
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
  Project                     Projects?           @relation(fields: [projectsId], references: [id])
  projectsId                  String
  ProjectEnvironment          ProjectEnvironment? @relation(fields: [projectEnvironmentProjectId, projectEnvironmentName], references: [projectId, name])
  projectEnvironmentProjectId String
  projectEnvironmentName      String

  @@id([projectsId, projectEnvironmentProjectId, projectEnvironmentName])
  @@map("config")
}

model Env {
  key                         String
  value                       String              @db.Text
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
  projectEnvironmentId        String
  projectEnvironment          ProjectEnvironment? @relation(fields: [projectEnvironmentProjectId, projectEnvironmentName], references: [projectId, name])
  Project                     Projects?           @relation(fields: [projectsId], references: [id])
  projectsId                  String
  projectEnvironmentProjectId String
  projectEnvironmentName      String

  @@id([projectsId, projectEnvironmentProjectId, projectEnvironmentName])
  @@map("env")
}
